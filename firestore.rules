
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user belongs to a specific company
    function belongsToCompany(companyName) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.empresa == companyName;
    }
    
    // Helper function to check if a user is a Super User
    function isSuperUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Super User';
    }

    // Users can read their own profile, and Super Users can read any profile.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isSuperUser());
      // Only Super Users can create/update/delete user profiles directly here.
      // Other roles are managed via specific app logic if needed.
      allow write: if isSuperUser();
    }
    
    // Public collections that any authenticated user can read
    match /sites/{siteId} {
      // Allow authenticated users to read sites for dropdowns.
      allow read: if request.auth != null; 
      // Only super users can create, update, or delete sites.
      allow write: if isSuperUser();
    }
    
    match /companies/{companyId} {
      // Allow authenticated users to read companies for dropdowns.
      allow read: if request.auth != null;
      // Only super users can create, update, or delete companies.
      allow write: if isSuperUser();
    }
    
    // Rules for RCA Analyses
    match /rcaAnalyses/{analysisId} {
      // Read access:
      // - The user is a Super User OR
      // - The user belongs to the same company as the analysis document.
      allow read: if request.auth != null && (isSuperUser() || belongsToCompany(resource.data.empresa));
      
      // Write access (create, update, delete):
      // - The user is a Super User OR
      // - The user belongs to the same company as the document they are trying to write.
      //   - For create: check incoming document's company.
      //   - For update/delete: check existing document's company.
      allow create: if request.auth != null && (isSuperUser() || belongsToCompany(request.resource.data.empresa));
      allow update, delete: if request.auth != null && (isSuperUser() || belongsToCompany(resource.data.empresa));
    }
    
    // Rules for Reported Events (often a summary collection)
    match /reportedEvents/{eventId} {
      // Read access:
      // - The user is a Super User OR
      // - The user belongs to the same company as the event document.
      allow read: if request.auth != null && (isSuperUser() || belongsToCompany(resource.data.empresa));
      
      // Write access:
      // - The user is a Super User OR
      // - The user belongs to the same company as the document.
      allow create: if request.auth != null && (isSuperUser() || belongsToCompany(request.resource.data.empresa));
      allow update, delete: if request.auth != null && (isSuperUser() || belongsToCompany(resource.data.empresa));
    }
  }
}
